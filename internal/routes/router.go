package routes

import (
	"crm_lite/internal/core/config"
	"crm_lite/internal/core/resource"
	"crm_lite/internal/middleware"
	"crm_lite/pkg/resp"

	"github.com/gin-gonic/gin"

	// docs is generated by Swag CLI
	_ "crm_lite/docs"

	swaggerFiles "github.com/swaggo/files"
	ginSwagger "github.com/swaggo/gin-swagger"
)

func NewRouter(resManager *resource.Manager) *gin.Engine {
	// 1. 设置Gin模式
	gin.SetMode(string(config.GetInstance().Server.Mode))
	router := gin.New()

	// 2. 注册通用中间件
	router.Use(middleware.GinLogger(), gin.Recovery())

	// 3. 注册公共路由组 (无需登录)
	publicGroup := router.Group("/api/v1")
	registerAuthRoutes(publicGroup, resManager) // 登录、注册等接口

	// 4. 注册受保护的路由组 (需要登录和权限验证)
	adminGroup := router.Group("/api/v1")
	adminGroup.Use(middleware.JWTAuthMiddleware(), middleware.CasbinMiddleware(resManager))
	{
		registerUserRoutes(adminGroup, resManager) // 示例：用户管理
		registerRoleRoutes(adminGroup, resManager)
		registerPermissionRoutes(adminGroup, resManager)
		registerCustomerRoutes(adminGroup, resManager)
		// registerCustomerRoutes(adminGroup, resManager) // 示例：客户管理
		// 未来新的受保护路由也在这里注册...
	}

	// 5. 设置一些通用路由
	// 健康检查
	router.GET("/health", func(c *gin.Context) {
		resp.Success(c, "ok")
	})

	// 欢迎页
	router.GET("/", func(c *gin.Context) {
		resp.Success(c, "Hello, World!")
	})
	// Add Swagger UI route
	router.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler))

	return router
}
