// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crm_lite/internal/dao/model"
)

func newMarketingCampaign(db *gorm.DB, opts ...gen.DOOption) marketingCampaign {
	_marketingCampaign := marketingCampaign{}

	_marketingCampaign.marketingCampaignDo.UseDB(db, opts...)
	_marketingCampaign.marketingCampaignDo.UseModel(&model.MarketingCampaign{})

	tableName := _marketingCampaign.marketingCampaignDo.TableName()
	_marketingCampaign.ALL = field.NewAsterisk(tableName)
	_marketingCampaign.ID = field.NewInt64(tableName, "id")
	_marketingCampaign.Name = field.NewString(tableName, "name")
	_marketingCampaign.Type = field.NewString(tableName, "type")
	_marketingCampaign.Status = field.NewString(tableName, "status")
	_marketingCampaign.TargetTags = field.NewString(tableName, "target_tags")
	_marketingCampaign.TargetSegmentID = field.NewInt64(tableName, "target_segment_id")
	_marketingCampaign.ContentTemplateID = field.NewInt64(tableName, "content_template_id")
	_marketingCampaign.Content = field.NewString(tableName, "content")
	_marketingCampaign.StartTime = field.NewTime(tableName, "start_time")
	_marketingCampaign.EndTime = field.NewTime(tableName, "end_time")
	_marketingCampaign.ActualStartTime = field.NewTime(tableName, "actual_start_time")
	_marketingCampaign.ActualEndTime = field.NewTime(tableName, "actual_end_time")
	_marketingCampaign.TargetCount = field.NewInt32(tableName, "target_count")
	_marketingCampaign.SentCount = field.NewInt32(tableName, "sent_count")
	_marketingCampaign.SuccessCount = field.NewInt32(tableName, "success_count")
	_marketingCampaign.ClickCount = field.NewInt32(tableName, "click_count")
	_marketingCampaign.CreatedBy = field.NewInt64(tableName, "created_by")
	_marketingCampaign.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_marketingCampaign.CreatedAt = field.NewTime(tableName, "created_at")
	_marketingCampaign.UpdatedAt = field.NewTime(tableName, "updated_at")
	_marketingCampaign.DeletedAt = field.NewField(tableName, "deleted_at")

	_marketingCampaign.fillFieldMap()

	return _marketingCampaign
}

type marketingCampaign struct {
	marketingCampaignDo

	ALL               field.Asterisk
	ID                field.Int64
	Name              field.String
	Type              field.String // 营销类型: sms, email, push_notification, wechat, call
	Status            field.String // 状态: draft, scheduled, active, paused, completed, archived
	TargetTags        field.String // 目标客户标签
	TargetSegmentID   field.Int64  // 目标客户分群ID（如果有客户分群功能）
	ContentTemplateID field.Int64  // 内容模板ID（如果有模板功能）
	Content           field.String // 活动具体内容或模板变量的JSON数据
	StartTime         field.Time
	EndTime           field.Time
	ActualStartTime   field.Time
	ActualEndTime     field.Time
	TargetCount       field.Int32 // 目标客户数量
	SentCount         field.Int32 // 已发送数量
	SuccessCount      field.Int32 // 成功数量
	ClickCount        field.Int32 // 点击数量
	CreatedBy         field.Int64 // 创建人
	UpdatedBy         field.Int64 // 更新人
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field

	fieldMap map[string]field.Expr
}

func (m marketingCampaign) Table(newTableName string) *marketingCampaign {
	m.marketingCampaignDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m marketingCampaign) As(alias string) *marketingCampaign {
	m.marketingCampaignDo.DO = *(m.marketingCampaignDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *marketingCampaign) updateTableName(table string) *marketingCampaign {
	m.ALL = field.NewAsterisk(table)
	m.ID = field.NewInt64(table, "id")
	m.Name = field.NewString(table, "name")
	m.Type = field.NewString(table, "type")
	m.Status = field.NewString(table, "status")
	m.TargetTags = field.NewString(table, "target_tags")
	m.TargetSegmentID = field.NewInt64(table, "target_segment_id")
	m.ContentTemplateID = field.NewInt64(table, "content_template_id")
	m.Content = field.NewString(table, "content")
	m.StartTime = field.NewTime(table, "start_time")
	m.EndTime = field.NewTime(table, "end_time")
	m.ActualStartTime = field.NewTime(table, "actual_start_time")
	m.ActualEndTime = field.NewTime(table, "actual_end_time")
	m.TargetCount = field.NewInt32(table, "target_count")
	m.SentCount = field.NewInt32(table, "sent_count")
	m.SuccessCount = field.NewInt32(table, "success_count")
	m.ClickCount = field.NewInt32(table, "click_count")
	m.CreatedBy = field.NewInt64(table, "created_by")
	m.UpdatedBy = field.NewInt64(table, "updated_by")
	m.CreatedAt = field.NewTime(table, "created_at")
	m.UpdatedAt = field.NewTime(table, "updated_at")
	m.DeletedAt = field.NewField(table, "deleted_at")

	m.fillFieldMap()

	return m
}

func (m *marketingCampaign) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *marketingCampaign) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 21)
	m.fieldMap["id"] = m.ID
	m.fieldMap["name"] = m.Name
	m.fieldMap["type"] = m.Type
	m.fieldMap["status"] = m.Status
	m.fieldMap["target_tags"] = m.TargetTags
	m.fieldMap["target_segment_id"] = m.TargetSegmentID
	m.fieldMap["content_template_id"] = m.ContentTemplateID
	m.fieldMap["content"] = m.Content
	m.fieldMap["start_time"] = m.StartTime
	m.fieldMap["end_time"] = m.EndTime
	m.fieldMap["actual_start_time"] = m.ActualStartTime
	m.fieldMap["actual_end_time"] = m.ActualEndTime
	m.fieldMap["target_count"] = m.TargetCount
	m.fieldMap["sent_count"] = m.SentCount
	m.fieldMap["success_count"] = m.SuccessCount
	m.fieldMap["click_count"] = m.ClickCount
	m.fieldMap["created_by"] = m.CreatedBy
	m.fieldMap["updated_by"] = m.UpdatedBy
	m.fieldMap["created_at"] = m.CreatedAt
	m.fieldMap["updated_at"] = m.UpdatedAt
	m.fieldMap["deleted_at"] = m.DeletedAt
}

func (m marketingCampaign) clone(db *gorm.DB) marketingCampaign {
	m.marketingCampaignDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m marketingCampaign) replaceDB(db *gorm.DB) marketingCampaign {
	m.marketingCampaignDo.ReplaceDB(db)
	return m
}

type marketingCampaignDo struct{ gen.DO }

type IMarketingCampaignDo interface {
	gen.SubQuery
	Debug() IMarketingCampaignDo
	WithContext(ctx context.Context) IMarketingCampaignDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IMarketingCampaignDo
	WriteDB() IMarketingCampaignDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IMarketingCampaignDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IMarketingCampaignDo
	Not(conds ...gen.Condition) IMarketingCampaignDo
	Or(conds ...gen.Condition) IMarketingCampaignDo
	Select(conds ...field.Expr) IMarketingCampaignDo
	Where(conds ...gen.Condition) IMarketingCampaignDo
	Order(conds ...field.Expr) IMarketingCampaignDo
	Distinct(cols ...field.Expr) IMarketingCampaignDo
	Omit(cols ...field.Expr) IMarketingCampaignDo
	Join(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo
	RightJoin(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo
	Group(cols ...field.Expr) IMarketingCampaignDo
	Having(conds ...gen.Condition) IMarketingCampaignDo
	Limit(limit int) IMarketingCampaignDo
	Offset(offset int) IMarketingCampaignDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IMarketingCampaignDo
	Unscoped() IMarketingCampaignDo
	Create(values ...*model.MarketingCampaign) error
	CreateInBatches(values []*model.MarketingCampaign, batchSize int) error
	Save(values ...*model.MarketingCampaign) error
	First() (*model.MarketingCampaign, error)
	Take() (*model.MarketingCampaign, error)
	Last() (*model.MarketingCampaign, error)
	Find() ([]*model.MarketingCampaign, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketingCampaign, err error)
	FindInBatches(result *[]*model.MarketingCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.MarketingCampaign) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IMarketingCampaignDo
	Assign(attrs ...field.AssignExpr) IMarketingCampaignDo
	Joins(fields ...field.RelationField) IMarketingCampaignDo
	Preload(fields ...field.RelationField) IMarketingCampaignDo
	FirstOrInit() (*model.MarketingCampaign, error)
	FirstOrCreate() (*model.MarketingCampaign, error)
	FindByPage(offset int, limit int) (result []*model.MarketingCampaign, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IMarketingCampaignDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (m marketingCampaignDo) Debug() IMarketingCampaignDo {
	return m.withDO(m.DO.Debug())
}

func (m marketingCampaignDo) WithContext(ctx context.Context) IMarketingCampaignDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m marketingCampaignDo) ReadDB() IMarketingCampaignDo {
	return m.Clauses(dbresolver.Read)
}

func (m marketingCampaignDo) WriteDB() IMarketingCampaignDo {
	return m.Clauses(dbresolver.Write)
}

func (m marketingCampaignDo) Session(config *gorm.Session) IMarketingCampaignDo {
	return m.withDO(m.DO.Session(config))
}

func (m marketingCampaignDo) Clauses(conds ...clause.Expression) IMarketingCampaignDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m marketingCampaignDo) Returning(value interface{}, columns ...string) IMarketingCampaignDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m marketingCampaignDo) Not(conds ...gen.Condition) IMarketingCampaignDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m marketingCampaignDo) Or(conds ...gen.Condition) IMarketingCampaignDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m marketingCampaignDo) Select(conds ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m marketingCampaignDo) Where(conds ...gen.Condition) IMarketingCampaignDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m marketingCampaignDo) Order(conds ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m marketingCampaignDo) Distinct(cols ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m marketingCampaignDo) Omit(cols ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m marketingCampaignDo) Join(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m marketingCampaignDo) LeftJoin(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m marketingCampaignDo) RightJoin(table schema.Tabler, on ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m marketingCampaignDo) Group(cols ...field.Expr) IMarketingCampaignDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m marketingCampaignDo) Having(conds ...gen.Condition) IMarketingCampaignDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m marketingCampaignDo) Limit(limit int) IMarketingCampaignDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m marketingCampaignDo) Offset(offset int) IMarketingCampaignDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m marketingCampaignDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IMarketingCampaignDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m marketingCampaignDo) Unscoped() IMarketingCampaignDo {
	return m.withDO(m.DO.Unscoped())
}

func (m marketingCampaignDo) Create(values ...*model.MarketingCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m marketingCampaignDo) CreateInBatches(values []*model.MarketingCampaign, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m marketingCampaignDo) Save(values ...*model.MarketingCampaign) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m marketingCampaignDo) First() (*model.MarketingCampaign, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketingCampaign), nil
	}
}

func (m marketingCampaignDo) Take() (*model.MarketingCampaign, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketingCampaign), nil
	}
}

func (m marketingCampaignDo) Last() (*model.MarketingCampaign, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketingCampaign), nil
	}
}

func (m marketingCampaignDo) Find() ([]*model.MarketingCampaign, error) {
	result, err := m.DO.Find()
	return result.([]*model.MarketingCampaign), err
}

func (m marketingCampaignDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.MarketingCampaign, err error) {
	buf := make([]*model.MarketingCampaign, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m marketingCampaignDo) FindInBatches(result *[]*model.MarketingCampaign, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m marketingCampaignDo) Attrs(attrs ...field.AssignExpr) IMarketingCampaignDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m marketingCampaignDo) Assign(attrs ...field.AssignExpr) IMarketingCampaignDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m marketingCampaignDo) Joins(fields ...field.RelationField) IMarketingCampaignDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m marketingCampaignDo) Preload(fields ...field.RelationField) IMarketingCampaignDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m marketingCampaignDo) FirstOrInit() (*model.MarketingCampaign, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketingCampaign), nil
	}
}

func (m marketingCampaignDo) FirstOrCreate() (*model.MarketingCampaign, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.MarketingCampaign), nil
	}
}

func (m marketingCampaignDo) FindByPage(offset int, limit int) (result []*model.MarketingCampaign, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m marketingCampaignDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m marketingCampaignDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m marketingCampaignDo) Delete(models ...*model.MarketingCampaign) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *marketingCampaignDo) withDO(do gen.Dao) *marketingCampaignDo {
	m.DO = *do.(*gen.DO)
	return m
}
