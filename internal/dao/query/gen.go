// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                 = new(Query)
	Activity          *activity
	AdminUser         *adminUser
	AdminUserRole     *adminUserRole
	CasbinRule        *casbinRule
	Contact           *contact
	Customer          *customer
	MarketingCampaign *marketingCampaign
	MarketingRecord   *marketingRecord
	Migration         *migration
	Order             *order
	OrderItem         *orderItem
	Product           *product
	Role              *role
	SysOutbox         *sysOutbox
	Wallet            *wallet
	WalletTransaction *walletTransaction
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	Activity = &Q.Activity
	AdminUser = &Q.AdminUser
	AdminUserRole = &Q.AdminUserRole
	CasbinRule = &Q.CasbinRule
	Contact = &Q.Contact
	Customer = &Q.Customer
	MarketingCampaign = &Q.MarketingCampaign
	MarketingRecord = &Q.MarketingRecord
	Migration = &Q.Migration
	Order = &Q.Order
	OrderItem = &Q.OrderItem
	Product = &Q.Product
	Role = &Q.Role
	SysOutbox = &Q.SysOutbox
	Wallet = &Q.Wallet
	WalletTransaction = &Q.WalletTransaction
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		Activity:          newActivity(db, opts...),
		AdminUser:         newAdminUser(db, opts...),
		AdminUserRole:     newAdminUserRole(db, opts...),
		CasbinRule:        newCasbinRule(db, opts...),
		Contact:           newContact(db, opts...),
		Customer:          newCustomer(db, opts...),
		MarketingCampaign: newMarketingCampaign(db, opts...),
		MarketingRecord:   newMarketingRecord(db, opts...),
		Migration:         newMigration(db, opts...),
		Order:             newOrder(db, opts...),
		OrderItem:         newOrderItem(db, opts...),
		Product:           newProduct(db, opts...),
		Role:              newRole(db, opts...),
		SysOutbox:         newSysOutbox(db, opts...),
		Wallet:            newWallet(db, opts...),
		WalletTransaction: newWalletTransaction(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	Activity          activity
	AdminUser         adminUser
	AdminUserRole     adminUserRole
	CasbinRule        casbinRule
	Contact           contact
	Customer          customer
	MarketingCampaign marketingCampaign
	MarketingRecord   marketingRecord
	Migration         migration
	Order             order
	OrderItem         orderItem
	Product           product
	Role              role
	SysOutbox         sysOutbox
	Wallet            wallet
	WalletTransaction walletTransaction
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Activity:          q.Activity.clone(db),
		AdminUser:         q.AdminUser.clone(db),
		AdminUserRole:     q.AdminUserRole.clone(db),
		CasbinRule:        q.CasbinRule.clone(db),
		Contact:           q.Contact.clone(db),
		Customer:          q.Customer.clone(db),
		MarketingCampaign: q.MarketingCampaign.clone(db),
		MarketingRecord:   q.MarketingRecord.clone(db),
		Migration:         q.Migration.clone(db),
		Order:             q.Order.clone(db),
		OrderItem:         q.OrderItem.clone(db),
		Product:           q.Product.clone(db),
		Role:              q.Role.clone(db),
		SysOutbox:         q.SysOutbox.clone(db),
		Wallet:            q.Wallet.clone(db),
		WalletTransaction: q.WalletTransaction.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		Activity:          q.Activity.replaceDB(db),
		AdminUser:         q.AdminUser.replaceDB(db),
		AdminUserRole:     q.AdminUserRole.replaceDB(db),
		CasbinRule:        q.CasbinRule.replaceDB(db),
		Contact:           q.Contact.replaceDB(db),
		Customer:          q.Customer.replaceDB(db),
		MarketingCampaign: q.MarketingCampaign.replaceDB(db),
		MarketingRecord:   q.MarketingRecord.replaceDB(db),
		Migration:         q.Migration.replaceDB(db),
		Order:             q.Order.replaceDB(db),
		OrderItem:         q.OrderItem.replaceDB(db),
		Product:           q.Product.replaceDB(db),
		Role:              q.Role.replaceDB(db),
		SysOutbox:         q.SysOutbox.replaceDB(db),
		Wallet:            q.Wallet.replaceDB(db),
		WalletTransaction: q.WalletTransaction.replaceDB(db),
	}
}

type queryCtx struct {
	Activity          IActivityDo
	AdminUser         IAdminUserDo
	AdminUserRole     IAdminUserRoleDo
	CasbinRule        ICasbinRuleDo
	Contact           IContactDo
	Customer          ICustomerDo
	MarketingCampaign IMarketingCampaignDo
	MarketingRecord   IMarketingRecordDo
	Migration         IMigrationDo
	Order             IOrderDo
	OrderItem         IOrderItemDo
	Product           IProductDo
	Role              IRoleDo
	SysOutbox         ISysOutboxDo
	Wallet            IWalletDo
	WalletTransaction IWalletTransactionDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		Activity:          q.Activity.WithContext(ctx),
		AdminUser:         q.AdminUser.WithContext(ctx),
		AdminUserRole:     q.AdminUserRole.WithContext(ctx),
		CasbinRule:        q.CasbinRule.WithContext(ctx),
		Contact:           q.Contact.WithContext(ctx),
		Customer:          q.Customer.WithContext(ctx),
		MarketingCampaign: q.MarketingCampaign.WithContext(ctx),
		MarketingRecord:   q.MarketingRecord.WithContext(ctx),
		Migration:         q.Migration.WithContext(ctx),
		Order:             q.Order.WithContext(ctx),
		OrderItem:         q.OrderItem.WithContext(ctx),
		Product:           q.Product.WithContext(ctx),
		Role:              q.Role.WithContext(ctx),
		SysOutbox:         q.SysOutbox.WithContext(ctx),
		Wallet:            q.Wallet.WithContext(ctx),
		WalletTransaction: q.WalletTransaction.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
