// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crm_lite/internal/dao/model"
)

func newSysOutbox(db *gorm.DB, opts ...gen.DOOption) sysOutbox {
	_sysOutbox := sysOutbox{}

	_sysOutbox.sysOutboxDo.UseDB(db, opts...)
	_sysOutbox.sysOutboxDo.UseModel(&model.SysOutbox{})

	tableName := _sysOutbox.sysOutboxDo.TableName()
	_sysOutbox.ALL = field.NewAsterisk(tableName)
	_sysOutbox.ID = field.NewInt64(tableName, "id")
	_sysOutbox.EventType = field.NewString(tableName, "event_type")
	_sysOutbox.Payload = field.NewString(tableName, "payload")
	_sysOutbox.CreatedAt = field.NewInt64(tableName, "created_at")
	_sysOutbox.ProcessedAt = field.NewInt64(tableName, "processed_at")

	_sysOutbox.fillFieldMap()

	return _sysOutbox
}

// sysOutbox 系统事件发布表，支持Outbox模式
type sysOutbox struct {
	sysOutboxDo

	ALL         field.Asterisk
	ID          field.Int64
	EventType   field.String // 事件类型：order.placed, wallet.credited等
	Payload     field.String // 事件载荷数据
	CreatedAt   field.Int64  // 创建时间（Unix时间戳）
	ProcessedAt field.Int64  // 处理时间（Unix时间戳），NULL表示未处理

	fieldMap map[string]field.Expr
}

func (s sysOutbox) Table(newTableName string) *sysOutbox {
	s.sysOutboxDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOutbox) As(alias string) *sysOutbox {
	s.sysOutboxDo.DO = *(s.sysOutboxDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOutbox) updateTableName(table string) *sysOutbox {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.EventType = field.NewString(table, "event_type")
	s.Payload = field.NewString(table, "payload")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.ProcessedAt = field.NewInt64(table, "processed_at")

	s.fillFieldMap()

	return s
}

func (s *sysOutbox) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOutbox) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 5)
	s.fieldMap["id"] = s.ID
	s.fieldMap["event_type"] = s.EventType
	s.fieldMap["payload"] = s.Payload
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["processed_at"] = s.ProcessedAt
}

func (s sysOutbox) clone(db *gorm.DB) sysOutbox {
	s.sysOutboxDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysOutbox) replaceDB(db *gorm.DB) sysOutbox {
	s.sysOutboxDo.ReplaceDB(db)
	return s
}

type sysOutboxDo struct{ gen.DO }

type ISysOutboxDo interface {
	gen.SubQuery
	Debug() ISysOutboxDo
	WithContext(ctx context.Context) ISysOutboxDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysOutboxDo
	WriteDB() ISysOutboxDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysOutboxDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysOutboxDo
	Not(conds ...gen.Condition) ISysOutboxDo
	Or(conds ...gen.Condition) ISysOutboxDo
	Select(conds ...field.Expr) ISysOutboxDo
	Where(conds ...gen.Condition) ISysOutboxDo
	Order(conds ...field.Expr) ISysOutboxDo
	Distinct(cols ...field.Expr) ISysOutboxDo
	Omit(cols ...field.Expr) ISysOutboxDo
	Join(table schema.Tabler, on ...field.Expr) ISysOutboxDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysOutboxDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysOutboxDo
	Group(cols ...field.Expr) ISysOutboxDo
	Having(conds ...gen.Condition) ISysOutboxDo
	Limit(limit int) ISysOutboxDo
	Offset(offset int) ISysOutboxDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOutboxDo
	Unscoped() ISysOutboxDo
	Create(values ...*model.SysOutbox) error
	CreateInBatches(values []*model.SysOutbox, batchSize int) error
	Save(values ...*model.SysOutbox) error
	First() (*model.SysOutbox, error)
	Take() (*model.SysOutbox, error)
	Last() (*model.SysOutbox, error)
	Find() ([]*model.SysOutbox, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOutbox, err error)
	FindInBatches(result *[]*model.SysOutbox, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysOutbox) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysOutboxDo
	Assign(attrs ...field.AssignExpr) ISysOutboxDo
	Joins(fields ...field.RelationField) ISysOutboxDo
	Preload(fields ...field.RelationField) ISysOutboxDo
	FirstOrInit() (*model.SysOutbox, error)
	FirstOrCreate() (*model.SysOutbox, error)
	FindByPage(offset int, limit int) (result []*model.SysOutbox, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysOutboxDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysOutboxDo) Debug() ISysOutboxDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOutboxDo) WithContext(ctx context.Context) ISysOutboxDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOutboxDo) ReadDB() ISysOutboxDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOutboxDo) WriteDB() ISysOutboxDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOutboxDo) Session(config *gorm.Session) ISysOutboxDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOutboxDo) Clauses(conds ...clause.Expression) ISysOutboxDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOutboxDo) Returning(value interface{}, columns ...string) ISysOutboxDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOutboxDo) Not(conds ...gen.Condition) ISysOutboxDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOutboxDo) Or(conds ...gen.Condition) ISysOutboxDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOutboxDo) Select(conds ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOutboxDo) Where(conds ...gen.Condition) ISysOutboxDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOutboxDo) Order(conds ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOutboxDo) Distinct(cols ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOutboxDo) Omit(cols ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOutboxDo) Join(table schema.Tabler, on ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOutboxDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOutboxDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOutboxDo) Group(cols ...field.Expr) ISysOutboxDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOutboxDo) Having(conds ...gen.Condition) ISysOutboxDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOutboxDo) Limit(limit int) ISysOutboxDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOutboxDo) Offset(offset int) ISysOutboxDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOutboxDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOutboxDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOutboxDo) Unscoped() ISysOutboxDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOutboxDo) Create(values ...*model.SysOutbox) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOutboxDo) CreateInBatches(values []*model.SysOutbox, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOutboxDo) Save(values ...*model.SysOutbox) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOutboxDo) First() (*model.SysOutbox, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOutbox), nil
	}
}

func (s sysOutboxDo) Take() (*model.SysOutbox, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOutbox), nil
	}
}

func (s sysOutboxDo) Last() (*model.SysOutbox, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOutbox), nil
	}
}

func (s sysOutboxDo) Find() ([]*model.SysOutbox, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOutbox), err
}

func (s sysOutboxDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOutbox, err error) {
	buf := make([]*model.SysOutbox, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOutboxDo) FindInBatches(result *[]*model.SysOutbox, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOutboxDo) Attrs(attrs ...field.AssignExpr) ISysOutboxDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOutboxDo) Assign(attrs ...field.AssignExpr) ISysOutboxDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOutboxDo) Joins(fields ...field.RelationField) ISysOutboxDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOutboxDo) Preload(fields ...field.RelationField) ISysOutboxDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOutboxDo) FirstOrInit() (*model.SysOutbox, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOutbox), nil
	}
}

func (s sysOutboxDo) FirstOrCreate() (*model.SysOutbox, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOutbox), nil
	}
}

func (s sysOutboxDo) FindByPage(offset int, limit int) (result []*model.SysOutbox, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOutboxDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOutboxDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOutboxDo) Delete(models ...*model.SysOutbox) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOutboxDo) withDO(do gen.Dao) *sysOutboxDo {
	s.DO = *do.(*gen.DO)
	return s
}
