basePath: /api/v1
definitions:
  dto.AdminCreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        description: 使用指针以区分 "未提供" 和 "设置为false"
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        description: 关联的角色ID列表
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.AdminUpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        items:
          type: integer
        type: array
    type: object
  dto.ContactCreateRequest:
    properties:
      email:
        type: string
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
    required:
    - name
    type: object
  dto.ContactResponse:
    properties:
      created_at:
        type: string
      customer_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
      updated_at:
        type: string
    type: object
  dto.ContactUpdateRequest:
    properties:
      email:
        type: string
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
    type: object
  dto.CustomerBatchGetRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.CustomerCreateRequest:
    properties:
      assigned_to:
        description: 分配给哪个员工
        type: integer
      birthday:
        description: 生日，格式：YYYY-MM-DD
        type: string
      email:
        type: string
      gender:
        description: '性别: male, female, unknown'
        type: string
      level:
        description: '客户等级: 普通, 银牌, 金牌, 铂金'
        type: string
      name:
        type: string
      note:
        description: 备注
        type: string
      phone:
        description: 使用e164格式校验手机号
        type: string
      source:
        description: 客户来源：manual, referral, marketing, etc.
        type: string
      tags:
        description: 标签，逗号分隔
        items:
          type: string
        type: array
    required:
    - name
    - phone
    type: object
  dto.CustomerListResponse:
    properties:
      customers:
        items:
          $ref: '#/definitions/dto.CustomerResponse'
        type: array
      total:
        type: integer
    type: object
  dto.CustomerResponse:
    properties:
      address:
        type: string
      assigned_to:
        type: integer
      birthday:
        type: string
      created_at:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      level:
        type: string
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      source:
        type: string
      tags:
        description: 标签列表
        items:
          type: string
        type: array
      updated_at:
        type: string
      wallet_balance:
        description: 兼容测试字段
        type: number
    type: object
  dto.CustomerSegmentRequest:
    properties:
      age_max:
        example: 65
        type: integer
      age_min:
        example: 18
        type: integer
      gender:
        example: male
        type: string
      level:
        example: VIP
        type: string
      source:
        example: 微信
        type: string
      tags:
        example:
        - '["VIP"'
        - ' "新用户"]'
        items:
          type: string
        type: array
    type: object
  dto.CustomerSegmentResponse:
    properties:
      customers:
        items:
          properties:
            email:
              example: zhangsan@example.com
              type: string
            id:
              example: 100
              type: integer
            name:
              example: 张三
              type: string
            phone:
              example: 138****8888
              type: string
          type: object
        type: array
      total:
        example: 500
        type: integer
    type: object
  dto.CustomerUpdateRequest:
    properties:
      assigned_to:
        description: 分配给哪个员工
        type: integer
      birthday:
        description: 生日，格式：YYYY-MM-DD
        type: string
      email:
        type: string
      gender:
        description: '性别: male, female, unknown'
        type: string
      level:
        description: '客户等级: 普通, 银牌, 金牌, 铂金'
        type: string
      name:
        type: string
      note:
        description: 备注
        type: string
      phone:
        type: string
      source:
        description: 客户来源：manual, referral, marketing, etc.
        type: string
      tags:
        description: 标签，逗号分隔
        items:
          type: string
        type: array
    type: object
  dto.DashboardOverviewResponse:
    properties:
      active_marketing_campaigns:
        description: 活跃度指标
        example: 5
        type: integer
      customer_growth_rate:
        description: 增长率（与上月对比）
        example: 12.5
        type: number
      low_stock_products:
        example: 7
        type: integer
      monthly_new_customers:
        description: 本月数据
        example: 56
        type: integer
      monthly_orders:
        example: 234
        type: integer
      monthly_revenue:
        example: 186500
        type: number
      order_growth_rate:
        description: 订单增长率
        example: 8.3
        type: number
      pending_activities:
        example: 23
        type: integer
      revenue_growth_rate:
        description: 收入增长率
        example: 15.2
        type: number
      revenue_mom_rate:
        description: 收入同比/环比（以本月为周期，来源：钱包消费）
        example: 8.6
        type: number
      revenue_yoy_rate:
        description: 年同比
        example: 12.3
        type: number
      today_new_customers:
        description: 今日数据
        example: 3
        type: integer
      today_orders:
        example: 12
        type: integer
      today_revenue:
        example: 8500
        type: number
      total_balance:
        example: 125600
        type: number
      total_consumption:
        example: 230400
        type: number
      total_customers:
        description: 总体统计
        example: 1250
        type: integer
      total_orders:
        example: 3456
        type: integer
      total_products:
        example: 89
        type: integer
      total_recharge:
        example: 356000
        type: number
      total_revenue:
        example: 2450000
        type: number
      total_wallets:
        description: 钱包相关统计（以钱包消费作为收入口径）
        example: 1180
        type: integer
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.ListWalletTransactionsResponse:
    properties:
      total:
        type: integer
      transactions:
        items:
          $ref: '#/definitions/dto.WalletTransactionResponse'
        type: array
    type: object
  dto.LoginRequest:
    properties:
      captcha_token:
        description: Turnstile Token
        type: string
      password:
        description: 密码，必须提供
        type: string
      username:
        description: 用户名，必须提供
        type: string
    required:
    - captcha_token
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        description: 访问令牌
        type: string
      expires_in:
        description: access_token 的有效期（秒）
        type: integer
      refresh_token:
        description: 刷新令牌
        type: string
      token_type:
        description: 令牌类型, 通常是 "Bearer"
        type: string
    type: object
  dto.MarketingCampaignCreateRequest:
    properties:
      content:
        example: 亲爱的{name}，您有一份专属优惠待领取！
        type: string
      content_template_id:
        example: 0
        type: integer
      end_time:
        example: "2024-06-15T23:59:59Z"
        type: string
      name:
        example: 六月会员关怀活动
        type: string
      start_time:
        example: "2024-06-10T09:00:00Z"
        type: string
      target_segment_id:
        example: 0
        type: integer
      target_tags:
        example:
        - '["VIP"'
        - ' "新用户"]'
        items:
          type: string
        type: array
      type:
        enum:
        - sms
        - email
        - push_notification
        - wechat
        - call
        example: sms
        type: string
    required:
    - content
    - end_time
    - name
    - start_time
    - type
    type: object
  dto.MarketingCampaignExecuteRequest:
    properties:
      execution_type:
        enum:
        - actual
        - simulation
        example: actual
        type: string
    type: object
  dto.MarketingCampaignExecuteResponse:
    properties:
      execution_id:
        example: exec-12345
        type: string
      message:
        example: 营销活动已成功触发执行
        type: string
      status:
        example: triggered
        type: string
    type: object
  dto.MarketingCampaignListResponse:
    properties:
      campaigns:
        items:
          $ref: '#/definitions/dto.MarketingCampaignResponse'
        type: array
      total:
        example: 50
        type: integer
    type: object
  dto.MarketingCampaignResponse:
    properties:
      actual_end_time:
        type: string
      actual_start_time:
        example: "2024-06-10T09:05:00Z"
        type: string
      click_count:
        example: 280
        type: integer
      content:
        example: 亲爱的{name}，您有一份专属优惠待领取！
        type: string
      content_template_id:
        example: 0
        type: integer
      created_at:
        example: "2024-06-01T10:00:00Z"
        type: string
      created_by:
        example: 1
        type: integer
      end_time:
        example: "2024-06-15T23:59:59Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: 六月会员关怀活动
        type: string
      sent_count:
        example: 1450
        type: integer
      start_time:
        example: "2024-06-10T09:00:00Z"
        type: string
      status:
        example: active
        type: string
      success_count:
        example: 1400
        type: integer
      target_count:
        example: 1500
        type: integer
      target_segment_id:
        example: 0
        type: integer
      target_tags:
        example:
        - '["VIP"'
        - ' "新用户"]'
        items:
          type: string
        type: array
      type:
        example: sms
        type: string
      updated_at:
        example: "2024-06-10T14:30:00Z"
        type: string
      updated_by:
        example: 1
        type: integer
    type: object
  dto.MarketingCampaignStatsResponse:
    properties:
      campaign_id:
        example: 1
        type: integer
      campaign_name:
        example: 六月会员关怀活动
        type: string
      click_rate:
        description: 点击率 = clicked / delivered * 100
        example: 20
        type: number
      clicked_count:
        example: 280
        type: integer
      delivered_count:
        example: 1400
        type: integer
      delivery_rate:
        description: 计算比率
        example: 96.55
        type: number
      failed_count:
        example: 50
        type: integer
      open_rate:
        description: 打开率 = opened / delivered * 100
        example: 30
        type: number
      opened_count:
        example: 420
        type: integer
      replied_count:
        example: 35
        type: integer
      reply_rate:
        description: 回复率 = replied / delivered * 100
        example: 2.5
        type: number
      sent_count:
        example: 1450
        type: integer
      target_count:
        example: 1500
        type: integer
      unsubscribe_rate:
        description: 退订率 = unsubscribed / delivered * 100
        example: 0.86
        type: number
      unsubscribed_count:
        example: 12
        type: integer
    type: object
  dto.MarketingCampaignUpdateRequest:
    properties:
      content:
        type: string
      content_template_id:
        type: integer
      end_time:
        type: string
      name:
        example: 六月会员关怀活动（更新）
        type: string
      start_time:
        type: string
      status:
        enum:
        - draft
        - scheduled
        - active
        - paused
        - completed
        - archived
        type: string
      target_segment_id:
        type: integer
      target_tags:
        items:
          type: string
        type: array
      type:
        enum:
        - sms
        - email
        - push_notification
        - wechat
        - call
        type: string
    type: object
  dto.MarketingRecordListResponse:
    properties:
      records:
        items:
          $ref: '#/definitions/dto.MarketingRecordResponse'
        type: array
      total:
        example: 1500
        type: integer
    type: object
  dto.MarketingRecordResponse:
    properties:
      campaign_id:
        example: 1
        type: integer
      channel:
        example: sms
        type: string
      clicked_at:
        example: "2024-06-10T10:16:00Z"
        type: string
      contact_id:
        example: 1
        type: integer
      created_at:
        example: "2024-06-10T09:00:00Z"
        type: string
      customer_id:
        example: 100
        type: integer
      delivered_at:
        example: "2024-06-10T09:06:00Z"
        type: string
      error_message:
        type: string
      id:
        example: 1
        type: integer
      opened_at:
        example: "2024-06-10T10:15:00Z"
        type: string
      replied_at:
        type: string
      response:
        example: '{"action":"click","link_id":"promo123"}'
        type: string
      sent_at:
        example: "2024-06-10T09:05:00Z"
        type: string
      status:
        example: delivered
        type: string
    type: object
  dto.OrderCreateRequest:
    properties:
      customer_id:
        type: integer
      items:
        description: 订单项，至少要有一项
        items:
          $ref: '#/definitions/dto.OrderItemRequest'
        minItems: 1
        type: array
      order_date:
        type: string
      remark:
        type: string
      status:
        enum:
        - draft
        - pending
        - confirmed
        type: string
    required:
    - customer_id
    - items
    - order_date
    type: object
  dto.OrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      unit_price:
        description: 允许在下单时覆盖产品单价
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  dto.OrderItemResponse:
    properties:
      final_price:
        description: 最终价格 (数量 * 单价)
        type: number
      id:
        type: integer
      product_id:
        description: 产品ID
        type: integer
      quantity:
        description: 数量
        type: integer
      unit_price:
        description: 成交单价
        type: number
    type: object
  dto.OrderListResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.OrderResponse'
        type: array
      total:
        type: integer
    type: object
  dto.OrderResponse:
    properties:
      created_at:
        description: 创建时间
        type: string
      customer_id:
        description: 客户ID
        type: integer
      customer_name:
        description: 客户名称（关联查询时填充）
        type: string
      final_amount:
        description: 最终成交金额
        type: number
      id:
        type: integer
      items:
        description: 订单项列表
        items:
          $ref: '#/definitions/dto.OrderItemResponse'
        type: array
      order_date:
        description: 下单日期
        type: string
      order_no:
        description: 订单号
        type: string
      remark:
        description: 备注
        type: string
      status:
        description: 订单状态
        type: string
      total_amount:
        description: 订单总金额
        type: number
    type: object
  dto.PermissionRequest:
    properties:
      method:
        type: string
      path:
        type: string
      role:
        type: string
    required:
    - method
    - path
    - role
    type: object
  dto.ProductBatchGetRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.ProductCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - sku
    type: object
  dto.ProductListResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/dto.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  dto.ProductResponse:
    properties:
      created_at:
        description: 创建时间
        type: string
      description:
        description: 产品描述
        type: string
      id:
        type: integer
      name:
        description: 产品名称
        type: string
      price:
        description: 价格
        type: number
      sku:
        description: 库存单位
        type: string
      stock:
        description: 库存数量
        type: integer
      updated_at:
        description: 更新时间
        type: string
    type: object
  dto.ProductUpdateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      real_name:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.RoleCreateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      is_active:
        type: boolean
      name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - display_name
    - name
    type: object
  dto.RoleResponse:
    properties:
      description:
        type: string
      display_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
    type: object
  dto.RoleUpdateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      is_active:
        type: boolean
    required:
    - display_name
    type: object
  dto.UserBatchGetRequest:
    properties:
      uuids:
        items:
          type: string
        type: array
    required:
    - uuids
    type: object
  dto.UserListResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.UserRoleRequest:
    properties:
      role:
        description: 角色名称
        type: string
      user_id:
        description: 用户ID
        type: string
    required:
    - role
    - user_id
    type: object
  dto.WalletRefundRequest:
    properties:
      amount:
        description: 退款金额，必须为正数
        type: number
      order_id:
        description: 关联订单ID
        type: integer
      reason:
        description: 退款原因
        type: string
      remark:
        description: 备注
        type: string
    required:
    - amount
    - order_id
    - reason
    type: object
  dto.WalletResponse:
    properties:
      balance:
        type: number
      created_at:
        type: string
      customer_id:
        type: integer
      frozen_balance:
        type: number
      id:
        type: integer
      total_consumed:
        type: number
      total_recharged:
        type: number
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.WalletTransactionRequest:
    properties:
      amount:
        description: 交易金额，必须为正数
        type: number
      bonus_amount:
        description: 赠送金额
        type: number
      phone_last:
        description: 手机号后四位
        type: string
      related_id:
        description: 关联ID（如订单ID等）
        type: integer
      remark:
        description: 备注
        type: string
      source:
        description: '交易来源: manual, order, refund, system 等'
        type: string
      type:
        description: '交易类型: recharge (充值), consume (消费), refund (退款)'
        enum:
        - recharge
        - consume
        - refund
        type: string
    required:
    - amount
    - source
    - type
    type: object
  dto.WalletTransactionResponse:
    properties:
      amount:
        type: number
      balance_after:
        type: number
      balance_before:
        type: number
      created_at:
        type: string
      id:
        type: integer
      operator_id:
        type: integer
      related_id:
        type: integer
      remark:
        type: string
      source:
        type: string
      type:
        type: string
      wallet_id:
        type: integer
    type: object
  resp.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: juleschu0929@gmail.com
    name: Jules Chu
    url: https://github.com/julesChu12
  description: This is a lightweight CRM system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: https://github.com/julesChu12/crm_lite/blob/main/LICENSE
  title: CRM Lite API
  version: "1.0"
paths:
  /api/maintenance/logs/cleanup:
    post:
      consumes:
      - application/json
      description: 手动执行日志清理操作，通常由外部调度器调用
      parameters:
      - description: 是否为试运行模式
        in: query
        name: dry_run
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: 清理成功
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 清理失败
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 手动触发日志清理
      tags:
      - 维护管理
  /api/maintenance/logs/status:
    get:
      consumes:
      - application/json
      description: 获取当前日志清理器的运行状态和配置信息
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 获取日志清理器状态
      tags:
      - 维护管理
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: 用户提交邮箱，系统发送重置密码链接/令牌
      parameters:
      - description: 用户邮箱
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 忘记密码
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: 使用用户名和密码进行登录
      parameters:
      - description: 登录凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 用户登录
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: 将当前用户的JWT加入黑名单以实现登出
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 用户登出
      tags:
      - Auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取个人资料
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: 使用有效的刷新令牌获取新的访问令牌
      parameters:
      - description: 刷新令牌
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 刷新令牌
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: 使用令牌和新密码来重置用户密码
      parameters:
      - description: 重置密码凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 重置密码
      tags:
      - Auth
  /customers:
    get:
      description: Get a list of customers with pagination, filtering, and sorting
      parameters:
      - description: 按邮箱精确搜索
        in: query
        name: email
        type: string
      - collectionFormat: csv
        description: '新增: 用于根据ID批量查询'
        in: query
        items:
          type: integer
        name: ids
        type: array
      - description: 按姓名模糊搜索
        in: query
        name: name
        type: string
      - description: 排序字段, e.g., created_at_desc
        in: query
        name: order_by
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - description: 按手机号精确搜索
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: List customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Add a new customer to the database
      parameters:
      - description: Customer Create Request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Create a new customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      description: Delete a customer by its UUID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Delete a customer
      tags:
      - Customers
    get:
      description: Get a single customer by its UUID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get a single customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update an existing customer's details
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer Update Request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Update a customer
      tags:
      - Customers
  /customers/{id}/contacts:
    get:
      description: 根据客户ID获取其所有联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ContactResponse'
                  type: array
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 客户未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 获取客户的联系人列表
      tags:
      - Contacts
    post:
      consumes:
      - application/json
      description: 为指定客户创建一个新的联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人信息
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/dto.ContactCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ContactResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 客户未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 业务冲突（如主要联系人已存在）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 为客户创建新联系人
      tags:
      - Contacts
  /customers/{id}/contacts/{contact_id}:
    delete:
      description: 删除指定ID的联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人ID
        in: path
        name: contact_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 联系人未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 删除联系人
      tags:
      - Contacts
    get:
      description: 根据联系人ID获取其详细信息
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人ID
        in: path
        name: contact_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ContactResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 联系人未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 获取单个联系人详情
      tags:
      - Contacts
    put:
      consumes:
      - application/json
      description: 更新指定ID的联系人信息
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人ID
        in: path
        name: contact_id
        required: true
        type: integer
      - description: 要更新的联系人信息
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/dto.ContactUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 联系人未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 业务冲突（如主要联系人已存在）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 更新联系人信息
      tags:
      - Contacts
  /customers/batch-get:
    post:
      consumes:
      - application/json
      description: Get a list of customers by their IDs
      parameters:
      - description: Customer IDs
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Batch get customers
      tags:
      - Customers
  /dashboard/overview:
    get:
      consumes:
      - application/json
      description: 获取客户、订单、收入等汇总统计
      parameters:
      - description: '时间范围: today/week/month/quarter/year'
        in: query
        name: date_range
        type: string
      - description: 时区
        in: query
        name: timezone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.DashboardOverviewResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 工作台总览数据
      tags:
      - Dashboard
  /marketing/campaigns:
    get:
      description: 获取营销活动列表，支持分页和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 活动名称模糊搜索
        in: query
        name: name
        type: string
      - description: 活动类型
        enum:
        - sms
        - email
        - push_notification
        - wechat
        - call
        in: query
        name: type
        type: string
      - description: 活动状态
        enum:
        - draft
        - scheduled
        - active
        - paused
        - completed
        - archived
        in: query
        name: status
        type: string
      - description: 排序字段
        example: '"created_at_desc"'
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignListResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取营销活动列表
      tags:
      - Marketing
    post:
      consumes:
      - application/json
      description: 创建一个新的营销活动
      parameters:
      - description: 营销活动信息
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/dto.MarketingCampaignCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: 创建成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 活动名称已存在
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 创建营销活动
      tags:
      - Marketing
  /marketing/campaigns/{id}:
    delete:
      description: 删除指定的营销活动
      parameters:
      - description: 营销活动ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: 删除成功
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 营销活动未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 无法删除运行中的活动
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除营销活动
      tags:
      - Marketing
    get:
      description: 根据ID获取营销活动详细信息
      parameters:
      - description: 营销活动ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignResponse'
              type: object
        "404":
          description: 营销活动未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个营销活动
      tags:
      - Marketing
    put:
      consumes:
      - application/json
      description: 更新营销活动信息
      parameters:
      - description: 营销活动ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的营销活动信息
        in: body
        name: campaign
        required: true
        schema:
          $ref: '#/definitions/dto.MarketingCampaignUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 更新成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 营销活动未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 业务冲突（如活动名称已存在或无法修改）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新营销活动
      tags:
      - Marketing
  /marketing/campaigns/{id}/execute:
    post:
      consumes:
      - application/json
      description: 手动触发营销活动执行或进行模拟执行
      parameters:
      - description: 营销活动ID
        in: path
        name: id
        required: true
        type: string
      - description: 执行参数
        in: body
        name: request
        schema:
          $ref: '#/definitions/dto.MarketingCampaignExecuteRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 执行成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignExecuteResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 营销活动未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: 活动状态不允许执行
          schema:
            $ref: '#/definitions/resp.Response'
        "422":
          description: 没有找到目标客户
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 执行营销活动
      tags:
      - Marketing
  /marketing/campaigns/{id}/stats:
    get:
      description: 获取指定营销活动的详细统计数据
      parameters:
      - description: 营销活动ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingCampaignStatsResponse'
              type: object
        "404":
          description: 营销活动未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取营销活动统计
      tags:
      - Marketing
  /marketing/customer-segments:
    post:
      consumes:
      - application/json
      description: 根据指定条件获取客户分群信息
      parameters:
      - description: 分群条件
        in: body
        name: segment
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerSegmentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerSegmentResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取客户分群
      tags:
      - Marketing
  /marketing/records:
    get:
      description: 获取指定营销活动的客户触达记录
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 50
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 营销活动ID
        in: query
        name: campaign_id
        required: true
        type: integer
      - description: 客户ID
        in: query
        name: customer_id
        type: integer
      - description: 触达渠道
        enum:
        - sms
        - email
        - push_notification
        - wechat
        - call
        in: query
        name: channel
        type: string
      - description: 记录状态
        enum:
        - pending
        - sent
        - delivered
        - failed
        - opened
        - clicked
        - replied
        - unsubscribed
        in: query
        name: status
        type: string
      - description: 开始日期
        format: date
        in: query
        name: start_date
        type: string
      - description: 结束日期
        format: date
        in: query
        name: end_date
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 获取成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.MarketingRecordListResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取营销记录列表
      tags:
      - Marketing
  /orders:
    get:
      description: 获取订单列表，支持分页和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 按客户 ID 筛选
        in: query
        name: customer_id
        type: integer
      - description: 按状态筛选
        in: query
        name: status
        type: string
      - description: 排序字段 (e.g., order_date_desc)
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderListResponse'
              type: object
      summary: 获取订单列表
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: 创建一个新订单及其订单项
      parameters:
      - description: 订单信息
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.OrderCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderResponse'
              type: object
      summary: 创建订单
      tags:
      - Orders
  /orders/{id}:
    get:
      description: 根据 ID 获取单个订单的详细信息，包括订单项
      parameters:
      - description: 订单 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderResponse'
              type: object
      summary: 获取单个订单
      tags:
      - Orders
  /permissions:
    delete:
      consumes:
      - application/json
      description: 移除一条权限策略
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除权限策略
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: 添加一条权限策略 (p, role, path, method)
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 添加权限策略
      tags:
      - Permissions
  /permissions/{role}:
    get:
      description: 根据角色名获取其拥有的所有权限策略
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有权限
      tags:
      - Permissions
  /products:
    get:
      description: 获取产品列表，支持分页和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 按名称模糊搜索
        in: query
        name: name
        type: string
      - description: 按 SKU 精确搜索
        in: query
        name: sku
        type: string
      - description: 排序字段 (e.g., created_at_desc)
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
      summary: 获取产品列表
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: 创建一个新产品
      parameters:
      - description: 产品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 创建产品
      tags:
      - Products
  /products/{id}:
    delete:
      description: 根据 ID 删除一个产品
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: 删除产品
      tags:
      - Products
    get:
      description: 根据 ID 获取单个产品的详细信息
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 获取单个产品
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: 更新一个现有产品
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的产品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 更新产品
      tags:
      - Products
  /products/batch-get:
    post:
      consumes:
      - application/json
      description: 根据 ID 列表批量获取产品信息
      parameters:
      - description: 产品 ID 列表
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ProductBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
      summary: 批量获取产品
      tags:
      - Products
  /roles:
    get:
      consumes:
      - application/json
      description: 获取所有可用的用户角色
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RoleResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: 获取角色列表
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: 创建一个新的用户角色
      parameters:
      - description: 角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: 根据ID删除一个角色
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: 根据角色ID获取详细信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个角色详情
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: 更新一个已存在角色的信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新角色
      tags:
      - Roles
  /user-roles/assign:
    post:
      consumes:
      - application/json
      description: 将指定用户添加到一个角色中 (g, user, role)
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 给用户分配角色
      tags:
      - Permissions
  /user-roles/remove:
    post:
      consumes:
      - application/json
      description: 将用户从指定角色中移除
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除用户的角色
      tags:
      - Permissions
  /user-roles/roles/{user_id}:
    get:
      description: 根据用户ID获取其拥有的所有角色列表
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户的所有角色
      tags:
      - Permissions
  /user-roles/users/{role}:
    get:
      description: 根据角色名称获取拥有该角色的所有用户列表
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有用户
      tags:
      - Permissions
  /users:
    get:
      consumes:
      - application/json
      description: 分页、筛选、搜索用户列表
      parameters:
      - in: query
        name: email
        type: string
      - in: query
        name: is_active
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: username
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: uuids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: 由管理员创建一个新的用户账号并可以指定角色
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员创建用户
      tags:
      - Users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: 管理员删除一个用户
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: 根据用户UUID获取详细信息
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个用户详情
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: 管理员更新用户信息，包括角色等
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: 要更新的用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员更新用户
      tags:
      - Users
  /users/batch-get:
    post:
      consumes:
      - application/json
      description: 通过POST请求体中提供的UUID列表，批量获取用户信息
      parameters:
      - description: UUID列表
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/dto.UserBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 批量获取用户
      tags:
      - Users
  /v1/customers/{id}/wallet:
    get:
      consumes:
      - application/json
      description: 根据客户ID获取其默认的余额钱包信息
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.WalletResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 钱包未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
  /v1/customers/{id}/wallet/refund:
    post:
      consumes:
      - application/json
      description: 为客户处理订单退款，将金额退回到钱包
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 退款信息
        in: body
        name: refund
        required: true
        schema:
          $ref: '#/definitions/dto.WalletRefundRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 退款成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "403":
          description: 无权操作
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 客户或订单未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "422":
          description: 业务逻辑错误（如订单状态不允许退款）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
  /v1/customers/{id}/wallet/transactions:
    get:
      consumes:
      - application/json
      description: 根据客户ID获取其钱包交易记录，支持分页
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 20
        description: 每页数量
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ListWalletTransactionsResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 钱包未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
    post:
      consumes:
      - application/json
      description: 为客户的钱包创建一笔交易（充值、消费或退款）
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: '交易信息 (type: recharge|consume|refund; bonus_amount 可选; consume
          时需 phone_last4)'
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.WalletTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "403":
          description: 无权操作
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 客户或钱包未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "422":
          description: 业务逻辑错误（如余额不足）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
swagger: "2.0"
