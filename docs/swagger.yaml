basePath: /api/v1
definitions:
  dto.AdminCreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        description: 使用指针以区分 "未提供" 和 "设置为false"
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        description: 关联的角色ID列表
        items:
          type: string
        type: array
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.AdminUpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        items:
          type: string
        type: array
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginRequest:
    properties:
      password:
        description: 密码，必须提供
        type: string
      username:
        description: 用户名，必须提供
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        description: 访问令牌
        type: string
      expires_in:
        description: access_token 的有效期（秒）
        type: integer
      refresh_token:
        description: 刷新令牌
        type: string
      token_type:
        description: 令牌类型, 通常是 "Bearer"
        type: string
    type: object
  dto.PermissionRequest:
    properties:
      method:
        type: string
      path:
        type: string
      role:
        type: string
    required:
    - method
    - path
    - role
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.RoleCreateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - display_name
    - name
    type: object
  dto.RoleResponse:
    properties:
      description:
        type: string
      display_name:
        type: string
      id:
        type: string
      is_active:
        type: boolean
      name:
        type: string
    type: object
  dto.RoleUpdateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      is_active:
        type: boolean
    required:
    - display_name
    type: object
  dto.UserListResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.UserRoleRequest:
    properties:
      role:
        description: 角色名称
        type: string
      user_id:
        description: 用户ID
        type: string
    required:
    - role
    - user_id
    type: object
  resp.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a lightweight CRM system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CRM Lite API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: 用户提交邮箱，系统发送重置密码链接/令牌
      parameters:
      - description: 用户邮箱
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 忘记密码
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: 使用用户名和密码进行登录
      parameters:
      - description: 登录凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 用户登录
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: 将当前用户的JWT加入黑名单以实现登出
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 用户登出
      tags:
      - Auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取个人资料
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: 使用有效的刷新令牌获取新的访问令牌
      parameters:
      - description: 刷新令牌
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 刷新令牌
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: 使用令牌和新密码来重置用户密码
      parameters:
      - description: 重置密码凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 重置密码
      tags:
      - Auth
  /permissions:
    delete:
      consumes:
      - application/json
      description: 移除一条权限策略
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除权限策略
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: 添加一条权限策略 (p, role, path, method)
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 添加权限策略
      tags:
      - Permissions
  /permissions/{role}:
    get:
      description: 根据角色名获取其拥有的所有权限策略
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有权限
      tags:
      - Permissions
  /roles:
    get:
      consumes:
      - application/json
      description: 获取所有可用的用户角色
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RoleResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: 获取角色列表
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: 创建一个新的用户角色
      parameters:
      - description: 角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: 根据ID删除一个角色
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: 根据角色ID获取详细信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个角色详情
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: 更新一个已存在角色的信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新角色
      tags:
      - Roles
  /user-roles/assign:
    post:
      consumes:
      - application/json
      description: 将指定用户添加到一个角色中 (g, user, role)
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 给用户分配角色
      tags:
      - Permissions
  /user-roles/remove:
    post:
      consumes:
      - application/json
      description: 将用户从指定角色中移除
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除用户的角色
      tags:
      - Permissions
  /user-roles/roles/{user_id}:
    get:
      description: 根据用户ID获取其拥有的所有角色列表
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户的所有角色
      tags:
      - Permissions
  /user-roles/users/{role}:
    get:
      description: 根据角色名称获取拥有该角色的所有用户列表
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有用户
      tags:
      - Permissions
  /users:
    get:
      consumes:
      - application/json
      description: 分页、筛选、搜索用户列表
      parameters:
      - description: 按邮箱搜索
        in: query
        name: email
        type: string
      - description: 按状态筛选
        in: query
        name: is_active
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - description: 按用户名模糊搜索
        in: query
        name: username
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: 由管理员创建一个新的用户账号并可以指定角色
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员创建用户
      tags:
      - Users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: 管理员删除一个用户
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: 根据用户UUID获取详细信息
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个用户详情
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: 管理员更新用户信息，包括角色等
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: 要更新的用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员更新用户
      tags:
      - Users
swagger: "2.0"
