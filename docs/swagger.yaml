basePath: /api/v1
definitions:
  dto.AdminCreateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        description: 使用指针以区分 "未提供" 和 "设置为false"
        type: boolean
      password:
        minLength: 6
        type: string
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        description: 关联的角色ID列表
        items:
          type: integer
        type: array
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.AdminUpdateUserRequest:
    properties:
      avatar:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      role_ids:
        items:
          type: integer
        type: array
    type: object
  dto.ContactCreateRequest:
    properties:
      email:
        type: string
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
    required:
    - name
    type: object
  dto.ContactResponse:
    properties:
      created_at:
        type: string
      customer_id:
        type: integer
      email:
        type: string
      id:
        type: integer
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
      updated_at:
        type: string
    type: object
  dto.ContactUpdateRequest:
    properties:
      email:
        type: string
      is_primary:
        type: boolean
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      position:
        type: string
    type: object
  dto.CustomerBatchGetRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.CustomerCreateRequest:
    properties:
      assigned_to:
        description: 分配给哪个员工
        type: integer
      birthday:
        description: 生日，格式：YYYY-MM-DD
        type: string
      email:
        type: string
      gender:
        description: '性别: male, female, unknown'
        type: string
      level:
        description: '客户等级: 普通, 银牌, 金牌, 铂金'
        type: string
      name:
        type: string
      note:
        description: 备注
        type: string
      phone:
        description: 使用e164格式校验手机号
        type: string
      source:
        description: 客户来源：manual, referral, marketing, etc.
        type: string
      tags:
        description: 标签，逗号分隔
        type: string
    required:
    - name
    type: object
  dto.CustomerListResponse:
    properties:
      customers:
        items:
          $ref: '#/definitions/dto.CustomerResponse'
        type: array
      total:
        type: integer
    type: object
  dto.CustomerResponse:
    properties:
      assigned_to:
        type: integer
      birthday:
        type: string
      created_at:
        type: string
      email:
        type: string
      gender:
        type: string
      id:
        type: integer
      level:
        type: string
      name:
        type: string
      note:
        type: string
      phone:
        type: string
      source:
        type: string
      tags:
        type: string
      updated_at:
        type: string
    type: object
  dto.CustomerUpdateRequest:
    properties:
      assigned_to:
        description: 分配给哪个员工
        type: integer
      birthday:
        description: 生日，格式：YYYY-MM-DD
        type: string
      email:
        type: string
      gender:
        description: '性别: male, female, unknown'
        type: string
      level:
        description: '客户等级: 普通, 银牌, 金牌, 铂金'
        type: string
      name:
        type: string
      note:
        description: 备注
        type: string
      phone:
        type: string
      source:
        description: 客户来源：manual, referral, marketing, etc.
        type: string
      tags:
        description: 标签，逗号分隔
        type: string
    type: object
  dto.ForgotPasswordRequest:
    properties:
      email:
        type: string
    required:
    - email
    type: object
  dto.LoginRequest:
    properties:
      password:
        description: 密码，必须提供
        type: string
      username:
        description: 用户名，必须提供
        type: string
    required:
    - password
    - username
    type: object
  dto.LoginResponse:
    properties:
      access_token:
        description: 访问令牌
        type: string
      expires_in:
        description: access_token 的有效期（秒）
        type: integer
      refresh_token:
        description: 刷新令牌
        type: string
      token_type:
        description: 令牌类型, 通常是 "Bearer"
        type: string
    type: object
  dto.OrderCreateRequest:
    properties:
      customer_id:
        type: integer
      items:
        description: 订单项，至少要有一项
        items:
          $ref: '#/definitions/dto.OrderItemRequest'
        minItems: 1
        type: array
      order_date:
        type: string
      remark:
        type: string
      status:
        enum:
        - draft
        - pending
        - confirmed
        type: string
    required:
    - customer_id
    - items
    - order_date
    type: object
  dto.OrderItemRequest:
    properties:
      product_id:
        type: integer
      quantity:
        type: integer
      unit_price:
        description: 允许在下单时覆盖产品单价
        minimum: 0
        type: number
    required:
    - product_id
    - quantity
    - unit_price
    type: object
  dto.OrderItemResponse:
    properties:
      final_price:
        description: 最终价格 (数量 * 单价)
        type: number
      id:
        type: integer
      product_id:
        description: 产品ID
        type: integer
      quantity:
        description: 数量
        type: integer
      unit_price:
        description: 成交单价
        type: number
    type: object
  dto.OrderListResponse:
    properties:
      orders:
        items:
          $ref: '#/definitions/dto.OrderResponse'
        type: array
      total:
        type: integer
    type: object
  dto.OrderResponse:
    properties:
      created_at:
        description: 创建时间
        type: string
      customer_id:
        description: 客户ID
        type: integer
      customer_name:
        description: 客户名称（关联查询时填充）
        type: string
      final_amount:
        description: 最终成交金额
        type: number
      id:
        type: integer
      items:
        description: 订单项列表
        items:
          $ref: '#/definitions/dto.OrderItemResponse'
        type: array
      order_date:
        description: 下单日期
        type: string
      order_no:
        description: 订单号
        type: string
      remark:
        description: 备注
        type: string
      status:
        description: 订单状态
        type: string
      total_amount:
        description: 订单总金额
        type: number
    type: object
  dto.PermissionRequest:
    properties:
      method:
        type: string
      path:
        type: string
      role:
        type: string
    required:
    - method
    - path
    - role
    type: object
  dto.ProductBatchGetRequest:
    properties:
      ids:
        items:
          type: integer
        type: array
    required:
    - ids
    type: object
  dto.ProductCreateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      sku:
        type: string
      stock:
        minimum: 0
        type: integer
    required:
    - name
    - price
    - sku
    type: object
  dto.ProductListResponse:
    properties:
      products:
        items:
          $ref: '#/definitions/dto.ProductResponse'
        type: array
      total:
        type: integer
    type: object
  dto.ProductResponse:
    properties:
      created_at:
        description: 创建时间
        type: string
      description:
        description: 产品描述
        type: string
      id:
        type: integer
      name:
        description: 产品名称
        type: string
      price:
        description: 价格
        type: number
      sku:
        description: 库存单位
        type: string
      stock:
        description: 库存数量
        type: integer
      updated_at:
        description: 更新时间
        type: string
    type: object
  dto.ProductUpdateRequest:
    properties:
      description:
        type: string
      name:
        type: string
      price:
        type: number
      stock:
        minimum: 0
        type: integer
    type: object
  dto.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      password:
        type: string
      real_name:
        type: string
      username:
        type: string
    required:
    - email
    - password
    - username
    type: object
  dto.ResetPasswordRequest:
    properties:
      new_password:
        minLength: 6
        type: string
      token:
        type: string
    required:
    - new_password
    - token
    type: object
  dto.RoleCreateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
    required:
    - display_name
    - name
    type: object
  dto.RoleResponse:
    properties:
      description:
        type: string
      display_name:
        type: string
      id:
        type: integer
      is_active:
        type: boolean
      name:
        type: string
    type: object
  dto.RoleUpdateRequest:
    properties:
      description:
        type: string
      display_name:
        maxLength: 100
        minLength: 2
        type: string
      is_active:
        type: boolean
    required:
    - display_name
    type: object
  dto.UserBatchGetRequest:
    properties:
      uuids:
        items:
          type: string
        type: array
    required:
    - uuids
    type: object
  dto.UserListResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/dto.UserResponse'
        type: array
    type: object
  dto.UserResponse:
    properties:
      avatar:
        type: string
      created_at:
        type: string
      email:
        type: string
      is_active:
        type: boolean
      phone:
        type: string
      real_name:
        type: string
      roles:
        items:
          type: string
        type: array
      username:
        type: string
      uuid:
        type: string
    type: object
  dto.UserRoleRequest:
    properties:
      role:
        description: 角色名称
        type: string
      user_id:
        description: 用户ID
        type: string
    required:
    - role
    - user_id
    type: object
  dto.WalletResponse:
    properties:
      balance:
        type: number
      created_at:
        type: string
      customer_id:
        type: integer
      frozen_balance:
        type: number
      id:
        type: integer
      total_consumed:
        type: number
      total_recharged:
        type: number
      type:
        type: string
      updated_at:
        type: string
    type: object
  dto.WalletTransactionRequest:
    properties:
      amount:
        description: 交易金额，必须为正数
        type: number
      related_id:
        description: 关联ID（如订单ID等）
        type: integer
      remark:
        description: 备注
        type: string
      source:
        description: '交易来源: manual, system 等'
        type: string
      type:
        description: '交易类型: recharge (充值), consume (消费)'
        enum:
        - recharge
        - consume
        type: string
    required:
    - amount
    - source
    - type
    type: object
  resp.Response:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: This is a lightweight CRM system.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: CRM Lite API
  version: "1.0"
paths:
  /auth/forgot-password:
    post:
      consumes:
      - application/json
      description: 用户提交邮箱，系统发送重置密码链接/令牌
      parameters:
      - description: 用户邮箱
        in: body
        name: email
        required: true
        schema:
          $ref: '#/definitions/dto.ForgotPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 忘记密码
      tags:
      - Auth
  /auth/login:
    post:
      consumes:
      - application/json
      description: 使用用户名和密码进行登录
      parameters:
      - description: 登录凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 用户登录
      tags:
      - Auth
  /auth/logout:
    post:
      consumes:
      - application/json
      description: 将当前用户的JWT加入黑名单以实现登出
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 用户登出
      tags:
      - Auth
  /auth/profile:
    get:
      consumes:
      - application/json
      description: 获取当前登录用户的详细信息
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取个人资料
      tags:
      - Auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: 使用有效的刷新令牌获取新的访问令牌
      parameters:
      - description: 刷新令牌
        in: body
        name: refresh_token
        required: true
        schema:
          $ref: '#/definitions/dto.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.LoginResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 刷新令牌
      tags:
      - Auth
  /auth/reset-password:
    post:
      consumes:
      - application/json
      description: 使用令牌和新密码来重置用户密码
      parameters:
      - description: 重置密码凭证
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.ResetPasswordRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/resp.Response'
      summary: 重置密码
      tags:
      - Auth
  /customers:
    get:
      description: Get a list of customers with pagination, filtering, and sorting
      parameters:
      - description: 按邮箱精确搜索
        in: query
        name: email
        type: string
      - collectionFormat: csv
        description: '新增: 用于根据ID批量查询'
        in: query
        items:
          type: integer
        name: ids
        type: array
      - description: 按姓名模糊搜索
        in: query
        name: name
        type: string
      - description: 排序字段, e.g., created_at_desc
        in: query
        name: order_by
        type: string
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - description: 按手机号精确搜索
        in: query
        name: phone
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: List customers
      tags:
      - Customers
    post:
      consumes:
      - application/json
      description: Add a new customer to the database
      parameters:
      - description: Customer Create Request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Create a new customer
      tags:
      - Customers
  /customers/{id}:
    delete:
      description: Delete a customer by its UUID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Delete a customer
      tags:
      - Customers
    get:
      description: Get a single customer by its UUID
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Get a single customer
      tags:
      - Customers
    put:
      consumes:
      - application/json
      description: Update an existing customer's details
      parameters:
      - description: Customer ID
        in: path
        name: id
        required: true
        type: string
      - description: Customer Update Request
        in: body
        name: customer
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Update a customer
      tags:
      - Customers
  /customers/batch-get:
    post:
      consumes:
      - application/json
      description: Get a list of customers by their IDs
      parameters:
      - description: Customer IDs
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/dto.CustomerBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.CustomerListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/resp.Response'
      summary: Batch get customers
      tags:
      - Customers
  /orders:
    get:
      description: 获取订单列表，支持分页和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 按客户 ID 筛选
        in: query
        name: customer_id
        type: integer
      - description: 按状态筛选
        in: query
        name: status
        type: string
      - description: 排序字段 (e.g., order_date_desc)
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderListResponse'
              type: object
      summary: 获取订单列表
      tags:
      - Orders
    post:
      consumes:
      - application/json
      description: 创建一个新订单及其订单项
      parameters:
      - description: 订单信息
        in: body
        name: order
        required: true
        schema:
          $ref: '#/definitions/dto.OrderCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderResponse'
              type: object
      summary: 创建订单
      tags:
      - Orders
  /orders/{id}:
    get:
      description: 根据 ID 获取单个订单的详细信息，包括订单项
      parameters:
      - description: 订单 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.OrderResponse'
              type: object
      summary: 获取单个订单
      tags:
      - Orders
  /permissions:
    delete:
      consumes:
      - application/json
      description: 移除一条权限策略
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除权限策略
      tags:
      - Permissions
    post:
      consumes:
      - application/json
      description: 添加一条权限策略 (p, role, path, method)
      parameters:
      - description: 权限信息
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/dto.PermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 添加权限策略
      tags:
      - Permissions
  /permissions/{role}:
    get:
      description: 根据角色名获取其拥有的所有权限策略
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    items:
                      type: string
                    type: array
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有权限
      tags:
      - Permissions
  /products:
    get:
      description: 获取产品列表，支持分页和筛选
      parameters:
      - default: 1
        description: 页码
        in: query
        name: page
        type: integer
      - default: 10
        description: 每页大小
        in: query
        name: page_size
        type: integer
      - description: 按名称模糊搜索
        in: query
        name: name
        type: string
      - description: 按 SKU 精确搜索
        in: query
        name: sku
        type: string
      - description: 排序字段 (e.g., created_at_desc)
        in: query
        name: order_by
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
      summary: 获取产品列表
      tags:
      - Products
    post:
      consumes:
      - application/json
      description: 创建一个新产品
      parameters:
      - description: 产品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 创建产品
      tags:
      - Products
  /products/{id}:
    delete:
      description: 根据 ID 删除一个产品
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
      summary: 删除产品
      tags:
      - Products
    get:
      description: 根据 ID 获取单个产品的详细信息
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 获取单个产品
      tags:
      - Products
    put:
      consumes:
      - application/json
      description: 更新一个现有产品
      parameters:
      - description: 产品 ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的产品信息
        in: body
        name: product
        required: true
        schema:
          $ref: '#/definitions/dto.ProductUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductResponse'
              type: object
      summary: 更新产品
      tags:
      - Products
  /products/batch-get:
    post:
      consumes:
      - application/json
      description: 根据 ID 列表批量获取产品信息
      parameters:
      - description: 产品 ID 列表
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/dto.ProductBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ProductListResponse'
              type: object
      summary: 批量获取产品
      tags:
      - Products
  /roles:
    get:
      consumes:
      - application/json
      description: 获取所有可用的用户角色
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.RoleResponse'
                  type: array
              type: object
      security:
      - ApiKeyAuth: []
      summary: 获取角色列表
      tags:
      - Roles
    post:
      consumes:
      - application/json
      description: 创建一个新的用户角色
      parameters:
      - description: 角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 创建角色
      tags:
      - Roles
  /roles/{id}:
    delete:
      consumes:
      - application/json
      description: 根据ID删除一个角色
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除角色
      tags:
      - Roles
    get:
      consumes:
      - application/json
      description: 根据角色ID获取详细信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个角色详情
      tags:
      - Roles
    put:
      consumes:
      - application/json
      description: 更新一个已存在角色的信息
      parameters:
      - description: Role ID
        in: path
        name: id
        required: true
        type: string
      - description: 要更新的角色信息
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/dto.RoleUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.RoleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 更新角色
      tags:
      - Roles
  /user-roles/assign:
    post:
      consumes:
      - application/json
      description: 将指定用户添加到一个角色中 (g, user, role)
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 给用户分配角色
      tags:
      - Permissions
  /user-roles/remove:
    post:
      consumes:
      - application/json
      description: 将用户从指定角色中移除
      parameters:
      - description: 用户和角色信息
        in: body
        name: user_role
        required: true
        schema:
          $ref: '#/definitions/dto.UserRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 移除用户的角色
      tags:
      - Permissions
  /user-roles/roles/{user_id}:
    get:
      description: 根据用户ID获取其拥有的所有角色列表
      parameters:
      - description: 用户ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户的所有角色
      tags:
      - Permissions
  /user-roles/users/{role}:
    get:
      description: 根据角色名称获取拥有该角色的所有用户列表
      parameters:
      - description: 角色名称
        in: path
        name: role
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    type: string
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取角色的所有用户
      tags:
      - Permissions
  /users:
    get:
      consumes:
      - application/json
      description: 分页、筛选、搜索用户列表
      parameters:
      - in: query
        name: email
        type: string
      - in: query
        name: is_active
        type: boolean
      - in: query
        name: page
        type: integer
      - in: query
        name: page_size
        type: integer
      - in: query
        name: username
        type: string
      - collectionFormat: csv
        in: query
        items:
          type: string
        name: uuids
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取用户列表
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: 由管理员创建一个新的用户账号并可以指定角色
      parameters:
      - description: 用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminCreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员创建用户
      tags:
      - Users
  /users/{uuid}:
    delete:
      consumes:
      - application/json
      description: 管理员删除一个用户
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 删除用户
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: 根据用户UUID获取详细信息
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 获取单个用户详情
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: 管理员更新用户信息，包括角色等
      parameters:
      - description: User UUID
        in: path
        name: uuid
        required: true
        type: string
      - description: 要更新的用户信息
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.AdminUpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 管理员更新用户
      tags:
      - Users
  /users/batch-get:
    post:
      consumes:
      - application/json
      description: 通过POST请求体中提供的UUID列表，批量获取用户信息
      parameters:
      - description: UUID列表
        in: body
        name: query
        required: true
        schema:
          $ref: '#/definitions/dto.UserBatchGetRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.UserListResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/resp.Response'
      security:
      - ApiKeyAuth: []
      summary: 批量获取用户
      tags:
      - Users
  /v1/customers/{id}/contacts:
    get:
      description: 根据客户ID获取其所有联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/dto.ContactResponse'
                  type: array
              type: object
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Contacts
    post:
      consumes:
      - application/json
      description: 为指定客户创建一个新的联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人信息
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/dto.ContactCreateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.ContactResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Contacts
  /v1/customers/{id}/contacts/{contact_id}:
    delete:
      description: 删除指定ID的联系人
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人ID
        in: path
        name: contact_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 联系人未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Contacts
    put:
      consumes:
      - application/json
      description: 更新指定ID的联系人信息
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 联系人ID
        in: path
        name: contact_id
        required: true
        type: integer
      - description: 要更新的联系人信息
        in: body
        name: contact
        required: true
        schema:
          $ref: '#/definitions/dto.ContactUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 联系人未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Contacts
  /v1/customers/{id}/wallet:
    get:
      consumes:
      - application/json
      description: 根据客户ID获取其默认的余额钱包信息
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: 成功
          schema:
            allOf:
            - $ref: '#/definitions/resp.Response'
            - properties:
                data:
                  $ref: '#/definitions/dto.WalletResponse'
              type: object
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 钱包未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
  /v1/customers/{id}/wallet/transactions:
    post:
      consumes:
      - application/json
      description: 为客户的钱包创建一笔交易（充值或消费）
      parameters:
      - description: 客户ID
        in: path
        name: id
        required: true
        type: integer
      - description: 交易信息
        in: body
        name: transaction
        required: true
        schema:
          $ref: '#/definitions/dto.WalletTransactionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 操作成功
          schema:
            $ref: '#/definitions/resp.Response'
        "400":
          description: 请求参数错误
          schema:
            $ref: '#/definitions/resp.Response'
        "403":
          description: 无权操作
          schema:
            $ref: '#/definitions/resp.Response'
        "404":
          description: 客户或钱包未找到
          schema:
            $ref: '#/definitions/resp.Response'
        "422":
          description: 业务逻辑错误（如余额不足）
          schema:
            $ref: '#/definitions/resp.Response'
        "500":
          description: 服务器内部错误
          schema:
            $ref: '#/definitions/resp.Response'
      tags:
      - Wallets
swagger: "2.0"
